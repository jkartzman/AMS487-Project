?sapply
function(n) t.prime(n, 0.001)
sapply(1:10, function(z) adder(z, b = 1))
sapply(1:10, function(n) t.prime(n, p = 0.001))
sapply(1:10, function(n) t.prime(n, 0.001))
sapply(1:10, function(n) t.prime(n=n, 0.001))
optimal.n <- function(p){
SMfzero(function(n) t.prime(n, p), 0, 50)
}
optimal.n(.001)
SMfzero(function(n) t.prime(n, .001), 0, 50)
curve(expr = function(n) t.prime(n, p=0.001), col='blue', lwd=2, lty=2, xlim=c(0, 50))
t.prime(50, 0.001)
curve(expr = function(x) t.prime(x, p=0.001), col='blue', lwd=2, lty=2, xlim=c(0, 50))
func <- function(x) t.prime(x, p=0.001)
curve(expr = Vectorize(func), col='blue', lwd=2, lty=2, xlim=c(0, 50))
curve(expr = function(x) expected.tests(x, .001), col='blue', lwd=2, lty=2, xlim=c(0, 50))
func <- function(x){x^3 - 2*x - 5}
curve(expr = func, col='blue', lwd=2, lty=2, xlim=c(0, 50))
tests <- function(n) {N(1/n) + 1 - q^n}
curve(expr = tests, col='blue', lwd=2, lty=2, xlim=c(0, 50))
N <- 1e5
curve(expr = tests, col='blue', lwd=2, lty=2, xlim=c(0, 50))
tests <- function(n) {N(1/n) + 1 - q^n}
curve(expr = tests, col='blue', lwd=2, lty=2, xlim=c(0, 50))
tests <- function(n) {100000(1/n) + 1 - q^n}
curve(expr = tests, col='blue', lwd=2, lty=2, xlim=c(0, 50))
tests <- function(n) {100000*(1/n) + 1 - 0.99^n}
curve(expr = tests, col='blue', lwd=2, lty=2, xlim=c(0, 50))
tests <- function(n) {100000*(1/n + 1 - 0.99^n)}
curve(expr = tests, col='blue', lwd=2, lty=2, xlim=c(0, 50))
tests <- function(n) {N*(1/n + 1 - 0.99^n)}
curve(expr = tests, col='blue', lwd=2, lty=2, xlim=c(0, 50))
options(device = "windows")
curve(expr = tests, col='blue', lwd=2, lty=2, xlim=c(0, 50))
curve(expr = tests, col='blue', lwd=2, lty=2, xlim=c(0, 50))
t.prime <- function(x){
population*(-1/x^2 - (1-.001)^x * log(1-.001))
}
curve(expr = t.prime, col='blue', lwd=2, lty=2, xlim=c(0, 50))
ln(1)
log(1)
log(0.5)
t.prime <- function(n, p){
population*(-1/n^2 - (1-p)^n * log(1-p))
}
t.prime(32, 0.001)
t.prime(50, 0.001)
t.prime(333, 0.001)
t.prime(33, 0.001)
test <- function(x){}
test <- function(x){population*(-1/x^2 - (0.999)^x * log(0.999))}
test(33)
curve(expr = test, col='blue', lwd=2, lty=2, xlim=c(1, 50))
curve(expr = test, col='blue', lwd=2, lty=2, xlim=c(0, 50))
curve(expr = test, col='blue', lwd=2, lty=2, xlim=c(0, 50), ylim=c(-50, 50))
curve(expr = test, col='blue', lwd=2, lty=2, xlim=c(0, 50), ylim=c(-50, 50))
abline(h=0)
abline(v=0)
test <- function(x, p=.001){population*(-1/x^2 - (1-p)^x * log(1-p))}
curve(expr = test, col='blue', lwd=2, lty=2, xlim=c(0, 50), ylim=c(-50, 50))
curve(expr = test, col='blue', lwd=2, lty=2, xlim=c(0, 50), ylim=c(-50, 50))
test2 <- function(x){test(x, p=0.01)}
curve(expr = test2, col='blue', lwd=2, lty=2, xlim=c(0, 50), ylim=c(-50, 50))
test2 <- function(x){test(x, p=0.001)}
curve(expr = test2, col='blue', lwd=2, lty=2, xlim=c(0, 50), ylim=c(-50, 50))
SMfzero(function(x){test(x, p=0.001)}, 0, 50)
SMfzero(function(x){test(x, p=0.001)}, 31, 33)
SMfzero(function(x){test(x, p=0.001)}, 0, 35)
SMfzero(function(x){test(x, p=0.001)}, 1, 35)
SMfzero(function(x){test(x, p=0.001)}, 0.5, 50)
optimal.n <- function(p){
SMfzero(function(n) t.prime(n, p), 0.5, 50)
}
optimal.n(0.001)
for(i in infection.rates) {}
for(i in infection.rates) {print(i)}
1:25
1:25 * 1e-2
c(c(1,2,3), c(3,4,5))
c(c(1,2,3), c(3,4,5), 1)
c(1:10 * 1e-3, 1:25 * 1e-2) == infection.rates
c(1:9 * 1e-3, 1:25 * 1e-2) == infection.rates
infection.rates
infection.test <- c(1:9 * 1e-3, 1:25 * 1e-2)
infection.test
infection.test == infection.rates
infection.test[1]
infection.test[9]
infection.rates[9]
infection.rates[9] == infection.test[9]
infection.rates[9] > infection.test[9]
infection.rates[9] < infection.test[9]
infection.test[9] - infection.rates[9]
infection.test[8] - infection.rates[8]
infection.test[9] - 0.009
infection.rates[9] - 0.009
typeof(optimal.n(0.001))
help("SMfzero")
x <- optimal.n(0.001)
x
x <- print(1)
x
type(x)
typeof(x)
?sink
capture.output(optimal.n(0.001))
capture.output(optimal.n(0.001))[0]
capture.output(optimal.n(0.001))[1]
typeof(capture.output(optimal.n(0.001))[1])
typeof(as.number(capture.output(optimal.n(0.001))[1]))
typeof(as.numeric(capture.output(optimal.n(0.001))[1]))
as.numeric(capture.output(optimal.n(0.001))[1]
)
out <- capture.output(optimal.n(0.001))
out
out[1]
out[1][4:]
strsplit(out[1], " ")
strsplit(out[1], " ")[1]
strsplit(out[1], " ")[[1]]
strsplit(out[1], " ")[[1]][1]
strsplit(out[1], " ")[[1]][2]
strsplit(out[1], " ")[2]
as.numeric(strsplit(out[1], " ")[[1]][2])
strsplit(out, " ")
strsplit(out, " ")[[3]]
strsplit(out, " ")[[3]][5]
"successful\"" == strsplit(out, " ")[[3]][5]
if(TRUE){print('test')}
if(FALSE){print('test')}
ceiling(z5)
ceiling(z5z)
ceiling(5)
floor(5)
print("Test" 1)
print("Test" + 1)
library(NLRoot)
library(NLRoot)
infection.rates <- c(1:9 * 1e-3, 1:25 * 1e-2)
population <- 1e5
req.tests <- function(n, p){
population*(1/n + 1 - (1-p)^n)
}
t.prime <- function(n, p){
population*(-1/n^2 - (1-p)^n * log(1-p))
}
optimal.n <- function(p){
SMfzero(function(n) t.prime(n, p), 1, 50)
}
for(p in infection.rates){
sec.out <- strsplit(capture.output(optimal.n(p)), " ")
is.successful <- "successful\"" == sec.out[[3]][5]
if(is.successful){
root <- as.numeric(sec.out[[1]][2])
root.ceil <- ceiling(root)
root.floor <- floor(root)
if(req.tests(root.ceil, p) >= req.tests(root.floor, p)){
print(root.floor)
} else {
print(root.ceil)
}
} else {
print("Select different starting values")
}
}
infection.rates
for(p in infection.rates){
sec.out <- strsplit(capture.output(optimal.n(p)), " ")
is.successful <- "successful\"" == sec.out[[3]][5]
if(is.successful){
root <- as.numeric(sec.out[[1]][2])
root.ceil <- ceiling(root)
root.floor <- floor(root)
if(req.tests(root.ceil, p) >= req.tests(root.floor, p)){
print(root.floor)
} else {
print(root.ceil)
}
} else {
print("Select different starting values")
}
}
for(p in infection.rates){
sec.out <- strsplit(capture.output(optimal.n(p)), " ")
is.successful <- "successful\"" == sec.out[[3]][5]
if(is.successful){
root <- as.numeric(sec.out[[1]][2])
root.ceil <- ceiling(root)
root.floor <- floor(root)
if(req.tests(root.ceil, p) >= req.tests(root.floor, p)){
print(root.floor)
} else {
print(root.ceil)
}
} else {
print("Select different starting values")
}
}
debugSource('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
optimal.n <- function(p){
SMfzero(function(n) t.prime(n, p), 1, 50)
}
for(p in infection.rates){
sec.out <- strsplit(capture.output(optimal.n(p)), " ")
is.successful <- "successful\"" == sec.out[[3]][5]
if(is.successful){
root <- as.numeric(sec.out[[1]][2])
root.ceil <- ceiling(root)
root.floor <- floor(root)
if(req.tests(root.ceil, p) >= req.tests(root.floor, p)){
print(root.floor)
} else {
print(root.ceil)
}
} else {
print("Select different starting values")
}
}
debugSource('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
sec.out
sec.out
t.prime(100000, .002)
t.prime(23, .002)
t.prime(24, .002)
t.prime(22, .002)
debugSource('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
sec.out
sec.out
t.prime(5500, .002)
t.prime(5499, .002)
t.prime(5501, .002)
?SMfzero
func <- function(n){req.tests(n, 0.001)}
optimize(func, interval = c(1,50))
func <- function(n){req.tests(n, 0.002)}
optimize(func, interval = c(1,50))
?optimize
x <- optimize(func, interval = c(1,50))
x
x[1]
x$minimum
x <- optimize(func, interval = c(1,100))
x
optimize(function(n){t.prime(n, p)}, 1, 100)[1]
optimize(function(n){t.prime(n, p)}, interval = c(1,100))[1]
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
optml.n <- function(p){
optimize(function(n){t.prime(n, p)}, interval = c(1,100))[1]
}
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
root
typeof(root)
root$minimum
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
?source
req.tests
req.tests(100, 0.001)
for(p in infection.rates){
root <- optml.n(p)
root.ceil <- ceiling(root)
root.floor <- floor(root)
if(req.tests(root.ceil, p) >= req.tests(root.floor, p)){
print(root.floor)
} else {
print(root.ceil)
}
}
infection.rates <- c(1:9 * 1e-3, 1:25 * 1e-2)
population <- 1e5
req.tests <- function(n, p){
population*(1/n + 1 - (1-p)^n)
}
optml.n <- function(p){
optimize(function(n){req.tests(n, p)}, interval = c(1,100))$minimum
}
req.tests(100, 0.001)
for(p in infection.rates){
root <- optml.n(p)
root.ceil <- ceiling(root)
root.floor <- floor(root)
if(req.tests(root.ceil, p) >= req.tests(root.floor, p)){
print(root.floor)
} else {
print(root.ceil)
}
}
root <- optml.n(p)
root
req.tests(100, 0.25)
req.tests(100, 0.25)
req.tests(3, 0.25)
req.tests(101, 0.25)
req.tests(99, 0.25)
req.tests(98, 0.25)
req.tests(50, 0.25)
?optim
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
optml.n <- function(p){
optimize(function(n){req.tests(n, p)}, interval = c(0,10))$minimum
}
optml.n(0.25)
optml.n <- function(p){
optimize(function(n){req.tests(n, p)}, interval = c(0,50))$minimum
}
optml.n(0.25)
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
cat("Test", 2)
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
?sprintf
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
cat("Infection rate:", p)
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
cat("Optimal batch size given infection rate:", p, "\n")
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
t.prime <- function(n, p){
population*(-1/n^2 - ((1-p)^n) * log(1-p))
}
uniroot(function(n) {t.prime(n, 0.001)}, interval = c(0, 50))
population <- 1e5
uniroot(function(n) {t.prime(n, 0.001)}, interval = c(0, 50))
uniroot(function(n) {t.prime(n, 0.25)}, interval = c(0, 50))
uniroot(function(n) {t.prime(n, 0.25)}, interval = c(0, 25))
uniroot(function(n) {t.prime(n, 0.25)}, interval = c(0, 10))
uniroot(function(n) {t.prime(n, 0.5)}, interval = c(0, 10))
uniroot(function(n) {t.prime(n, 0.5)}, interval = c(0, 5))
uniroot(function(n) {t.prime(n, 0.5)}, interval = c(0, 3))
uniroot(function(n) {t.prime(n, 0.5)}, interval = c(0, 2))
uniroot(function(n) {t.prime(n, 0.5)}, interval = c(1, 2))
uniroot(function(n) {t.prime(n, 0.5)}, interval = c(1, 3))
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
source('~/Research/Optimal  Batch Size Given Infection Rate (No Test Errors).R')
optml.n <- function(p){
if(p <= .01) {
optimize(function(n){req.tests(n, p)}, interval = c(0,50))$minimum
} else {
optimize(function(n){req.tests(n, p)}, interval = c(0,20))$minimum
}
}
population <- 1e5
optml.n(0.001)
req.tests <- function(n, p){
population*(1/n + 1 - (1-p)^n)
}
optml.n(0.001)
96109+3891
94047+2062+3322+568
?runif
help(?)
runif(1, 8, 11)
runif(1, 8, 11)
runif(1, 8, 11)
runif(1, 8, 11)
min(runif(1,3000,5000), runif(1,2000,4000),runif(1,150,200)*30)
results
help(NULL)
help(rbin)
help("rbind")
help("?")
help("rbind")
??
f
help("rbind")
results = NULL
for (k in 1:1000)
{
rolls = runif(1,3000,5000)
bags = runif(1,2000,4000)
cases = runif(1,150,200)*30
total = min (rolls, bags, cases)
results = rbind(results, data.frame(rolls, bags, cases, total))
}
help(data.frame)
head(results)
results
clear
clear()
rbern(1, 0.5)
install.packages("Rlab")
library(Rlab)
rbern(1, 0.5)
rbern(10, 0.75)
rbern(10, 0.9)
rbern(10, 0.75)
rbern(10, 1)
rbern(10, 0)
population
help(rbern)
1:10:2
seq(from=0, to=100, by=2)
seq(from=0, to=100, by=2)[5:10]
seq(from=0, to=100, by=2)[5:100]
sim
seq(from=0, to=100, by=3)
seq(from=0, to=100, by=3)[0:1]
seq(from=0, to=100, by=3)[1:2]
x <- c()
append(x, 1)
x
x <- c(1)
append(x, 1)
x
x <- c()
x <- append(x, 1)
x
1 %in% c(1,2,3)
1 %in% c(,2,3)
1 %in% c(2,3)
idx <- 1:5
idx[6]
1 == idx[6]
1 == 1
1 == idx[6:7]
1 %in% idx[6:7]
append(idx, 7)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
idx <- c(NA, 1)
idx
length(idx)
idx
idx[! is.na(idx)]
source('~/.active-rstudio-document')
total_batch_tests
1e5/32
100000/32
100000./32
source('~/.active-rstudio-document')
total_batch_tests
optml_n(test_p)
1e5 / optml_n(test_p)
source('~/.active-rstudio-document')
source('~/Research/montecarlo.R')
warnings()
source('~/Research/montecarlo.R')
total_indiv_tests
total_batch_tests
total_indiv_tests
source('~/Research/montecarlo.R')
debugSource('~/Research/montecarlo.R')
population
1 %in% population
population %in% 1
which(population %in% 1)
length(which(population %in% 1)) *32
length(which(population %in% 1))
curr_batch
batch
(batch - 1)/32
print(n)
population[batch:batch+n-1]
batch+n-1
batch
batch:batch+n-1
batch:(batch+n-1)
source('~/Research/montecarlo.R')
source('~/Research/montecarlo.R')
total_indiv_tests
total_indiv_tests
debugSource('~/Research/montecarlo.R')
1:2 2:3
(1:2) + (2:3)
mean(1:5)
source('~/Research/montecarlo.R')
optml_n(0.1)
optml.n(0.1)
source('~/Research/montecarlo.R')
curr_batch
debugSource('~/Research/montecarlo.R')
debugSource('~/Research/montecarlo.R')
print(curr_batch[-1])
source('~/Research/montecarlo.R')
print(curr_batch[5])
print(curr_batch[5])
source('~/Research/montecarlo.R')
source('~/Research/montecarlo.R')
!(TRUE)
source('~/Research/montecarlo.R')
source('~/Research/montecarlo.R')
source('~/Research/montecarlo.R')
ceil(0.1)
ceiling(0.1)
source('~/Research/montecarlo.R')
detach("package:Rlab", unload = TRUE)
library(Rlab)
source('~/Research/montecarlo.R')
detach("package:Rlab", unload = TRUE)
source('~/Research/montecarlo.R')
source('~/Research/montecarlo.R')
source('~/Research/montecarlo.R')
?rbern
source('C:/Users/Josh/AppData/Local/Temp/montecarlo.R')
source('~/Research/montecarlo.R')
x = c(1,2,3,4)
summary(x)
median(c(38, 42, 50, 61, 71, 79, 84, 83, 75, 64, 54, 43))
